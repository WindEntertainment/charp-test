name: prod

on:
  push:
    branches:
      - 'master'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  linting:
    name: 'Linting ${{ matrix.config.name }}'
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: 'Ubuntu',
              projectRoot: '/home/runner/work/dreich',
              artifact: 'linux-${{ github.event.pull_request.title }}',
              os: 'ubuntu-latest',
              dotnetBuildType: 'build',
              conanBuildType: 'Debug',
              cc: 'clang',
              cxx: 'clang++',
              isRelease: true,
            }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - name: Env
        uses: './.github/workflows/utils/json-to-env'
        with:
          json: ${{ toJSON(matrix.config) }}
      - name: Logger
        uses: './.github/workflows/modules/logger/lint'
      - name: Math
        uses: './.github/workflows/modules/math/lint'
      - name: Renderer
        uses: './.github/workflows/modules/renderer/lint'
      - name: Engine
        uses: './.github/workflows/modules/engine/lint'
      - name: Linting commit
        uses: './.github/workflows/utils/commit'

  testing:
    name: 'Testing: ${{ matrix.config.name }}'
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: 'MacOS',
              projectRoot: '/Users/runner/work/dreich',
              artifact: 'macos-${{ github.event.pull_request.title }}',
              os: 'macos-14',
              dotnetBuildType: 'build',
              conanBuildType: 'Debug',
              cc: 'clang',
              cxx: 'clang++',
              isRelease: true,
            }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - name: Env
        uses: './.github/workflows/utils/json-to-env'
        with:
          json: ${{ toJSON(matrix.config) }}
      - uses: ./.github/workflows/utils/setup-base-libs
      - name: Ctest
        shell: bash
        run: |
          export CC=${{ env.cc }}
          export CXX=${{ env.cxx }}
          wm run ctest
      - name: Engine
        uses: './.github/workflows/modules/engine/test'

  building:
    name: 'Build: ${{ matrix.config.name }}'
    runs-on: ${{ matrix.config.os }}
    needs:
      - linting
      - testing
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: 'Windows',
              projectRoot: 'D:/a/dreich',
              artifact: 'windows-${{ github.event.pull_request.title }}',
              os: 'windows-latest',
              dotnetBuildType: 'publish',
              conanBuildType: 'Release',
              cc: 'clang',
              cxx: 'clang++',
              isRelease: true,
            }
          - {
              name: 'Ubuntu',
              projectRoot: '/home/runner/work/dreich',
              artifact: 'linux-${{ github.event.pull_request.title }}',
              os: 'ubuntu-latest',
              dotnetBuildType: 'publish',
              conanBuildType: 'Release',
              cc: 'clang',
              cxx: 'clang++',
              isRelease: true,
            }
          - {
              name: 'MacOS',
              projectRoot: '/Users/runner/work/dreich',
              artifact: 'macos-${{ github.event.pull_request.title }}',
              os: 'macos-14',
              dotnetBuildType: 'publish',
              conanBuildType: 'Release',
              cc: 'clang',
              cxx: 'clang++',
              isRelease: true,
            }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
      - name: Env
        uses: './.github/workflows/utils/json-to-env'
        with:
          json: ${{ toJSON(matrix.config) }}
      - uses: ./.github/workflows/utils/setup-base-libs
      - name: Logger
        uses: './.github/workflows/modules/logger/build'
      - name: Math
        uses: './.github/workflows/modules/math/build'
      - name: Renderer
        uses: './.github/workflows/modules/renderer/build'
      - name: Engine
        uses: './.github/workflows/modules/engine/build'
      - name: Cpack build
        shell: bash
        run: |
          wm run conan-deploy
          wm run cpack-build -bt ${{ env.conanBuildType }}

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ github.sha }} > /dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "release_exists=false" >> $GITHUB_ENV

      - name: Create release (if not exists)
        if: env.release_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.sha }}
          release_name: 'Release ${{ github.sha }}'
          draft: false
          prerelease: false

      - name: Upload file with OS name
        if: env.release_exists == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $(pwd)/releases/wind.zip
          asset_name: ${{ matrix.os }}-wind.zip
          asset_content_type: application/zip

      - name: Upload file with OS name to existing release
        if: env.release_exists == 'true'
        run: |
          release_url=$(gh release view ${{ github.sha }} --json uploadUrl --jq .uploadUrl)
          gh release upload ${{ github.sha }} $(pwd)/releases/wind.zip --clobber

      # - name: Upload package as release
      #   shell: bash
      #   run: |
      #     git config user.name "GitHub Actions"
      #     git config user.email "actions@github.com"
      #     # gh release delete $sha --yes || echo "No existing release to delete"
      #     gh release create $sha --title "Release $artifact" --generate-notes --latest $(pwd)/releases/wind.zip
